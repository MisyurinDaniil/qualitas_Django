# Для работы данного blaybook нуобходимо подготвоить сервер

# apt update
# apt upgrade

# hostnamectl set-hostname staging.qualitas.store
# echo "staging.qualitas.store" > /etc/hostname
# echo "194.87.248.71  staging.qualitas.store" >> /etc/hosts

# apt install python python3-apt python3-pip sudo mc vim 
# apt install python-is-python3

# useradd -G sudo -m -s /bin/bash mda
# passwd mda

# ssh-copy-id -i ~/.ssh/staging_qualitas_ruvds/id_rsa mda@194.87.248.71
---

- name: Deploy Django project to remote server
  hosts: all
  vars:
      python_version: 3.10.13
      short_python_version: "3.10"
      # site_name: "staging.qualitas.store"
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      # !!!!!! {{ inventory_hostname }} - very important virable
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      site_name: "{{ inventory_hostname }}"
      mail_for_certbot_ssl: "qualitas.store@yandex.ru"
      use_git_branch: "productReview"
  
  tasks:
    # Обновляем кеш репозитория
    - name: Update apt-get repo and cache
      tags: python
      become: yes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    # Проверяем нализичие нежной нам версии Python
    - name: Check python version
      tags: python
      shell: /usr/local/bin/python{{ short_python_version }} --version
      register: cur_python3_version
      ignore_errors: yes  # If not installed

    # Блок установки необходимой версии Python
    - name: Download, compile and install the correct version of Python
      tags: python
      block:
      
      # Устанавливаем непобходимые пакеты для компиляции Python
      - name: Install required packages to compile Python-{{ python_version }} source code
        become: yes
        apt:
          pkg:
            - wget
            - build-essential
            - libncursesw5-dev
            - libssl-dev
            - libsqlite3-dev
            - tk-dev
            - libgdbm-dev
            - libc6-dev
            - libbz2-dev
            - libffi-dev
            - zlib1g-dev
          state: latest

      # Скачиваем Python нужной версии
      - name: Download Python-{{ python_version }}.tgz
        get_url:
          url: https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz
          dest: /home/{{ ansible_ssh_user }}/Python-{{ python_version }}.tgz
          mode: '0770'

      # Извлекаем из архива Python
      - name: Extract Python-{{ python_version }}.tgz
        unarchive:
          src: /home/{{ ansible_ssh_user }}/Python-{{ python_version }}.tgz
          dest: /home/{{ ansible_ssh_user }}/
          remote_src: yes

      # Конфигурируем Python    
      - name: Configure Python-{{ python_version }} build"
        command: ./configure
        args:
          chdir: /home/{{ ansible_ssh_user }}/Python-{{ python_version }}
          creates: /home/{{ ansible_ssh_user }}/Python-{{ python_version }}/Makefile"

      # Устанавливаем Python
      - name: Run install Python-{{ python_version }}
        become: yes
        make:
          chdir: "/home/{{ ansible_ssh_user }}/Python-{{ python_version }}"
          target: altinstall
      when: cur_python3_version['stderr'] != ""

    # Устанавливаем nginx и git
    - name: Install nginx and git
      become: yes
      apt: 
        pkg:
          - nginx
          - git
        state: present
      tags:
        - git

    # Скачиваем код проекта из гитхаба
    - name: Download project code from Github
      git:
        repo: https://github.com/MisyurinDaniil/qualitas_new_python_Django.git
        dest: /home/{{ ansible_ssh_user }}/sites/{{ site_name }}
        force: true
      tags:
        - git
        - update_project

    # Выбираем ветку git
    - name: Change git branch
      command: git checkout {{ use_git_branch }}
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ site_name }}
      tags:
        - git
        - update_project

    # Создаем виртуальное окружение и устанавливаем зависимости
    - name: Create Python-{{ python_version }} venv and install requirements
      pip: 
        requirements: /home/{{ ansible_ssh_user }}/sites/{{ site_name }}/requirements.txt
        virtualenv: /home/{{ ansible_ssh_user }}/sites/{{ site_name }}/venv
        virtualenv_command: /usr/local/bin/python{{ short_python_version }} -m venv
      tags:
        - django
        - update_project

    # Устраняет баг в названии библиотеки
    - name: Сhange a str - from django.utils.translation import gettext_lazy as _
      lineinfile: 
        dest: /home/{{ ansible_ssh_user }}/sites/{{ site_name }}/venv/lib/python3.10/site-packages/snowpenguin/django/recaptcha3/fields.py
        regexp: '^from django.utils.translation import'
        insertbefore: BOF
        line: 'from django.utils.translation import gettext_lazy as _'
      tags:
        - django
    
    # Добавляем переменные из зашифрованного ансиблом файла.
    - name: Add variables from ansible vault file for dotenv.j2.
      include_vars:
        file: vault_variable.yml
      tags:
        - dotenv
        - update_project

    # Создаем файл .env с переменными
    - name: Create .env file
      template: 
        src: ./dotenv.j2
        dest: /home/{{ ansible_ssh_user }}/sites/{{ site_name }}/.env
      tags:
        - dotenv
        - update_project

    # Прогоняем миграции
    - name: Run migrations
      django_manage:
        command: migrate
        app_path: "/home/{{ ansible_ssh_user }}/sites/{{ site_name }}"
        virtualenv: "/home/{{ ansible_ssh_user }}/sites/{{ site_name }}/venv"
      environment:
        DJANGO_DEBUG: "False"
        SITENAME : "{{ site_name }}"
        DJANGO_SECRET_KEY: "{{ django_secret_key }}"
        RECAPTCHA_PRIVATE_KEY: "{{ recaptcha_private_key }}"
        TELEGRAM_TOKEN: "{{ telegram_token }}"
        TELEGRAM_CHAT_ID: "{{ telegram_chat_id }}"
      tags:
        - django
        - update_project
    
    # Собираем все статические файлы в одном месте
    - name: Collect Django Static Files
      django_manage:
        command: collectstatic --noinput
        app_path: "/home/{{ ansible_ssh_user }}/sites/{{ site_name }}"
        virtualenv: "/home/{{ ansible_ssh_user }}/sites/{{ site_name }}/venv"
      environment: 
        DJANGO_DEBUG: "False"
        SITENAME : "{{ site_name }}"
        DJANGO_SECRET_KEY: "{{ django_secret_key }}"
        RECAPTCHA_PRIVATE_KEY: "{{ recaptcha_private_key }}"
        TELEGRAM_TOKEN: "{{ telegram_token }}"
        TELEGRAM_CHAT_ID: "{{ telegram_chat_id }}"
      tags:
        - django
        - update_project

    - name: Change NGINX start user
      become: yes
      replace:
        path: /etc/nginx/nginx.conf
        regexp: '^user www-data;'
        replace: |-
          #user www-data;
          user {{ ansible_ssh_user }};
      tags:
        - nginx

    # Удаляем дефолтный файл конфигурации nginx
    - name: Remove default NGINX file /etc/nginx/sites-enabled/defaults
      become: yes
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      tags:
        - nginx

    # Создаем файл конфигурации в sites-available
    - name: Add nginx config to sites-available
      become: yes
      template: 
        src: ./nginx-sites-available.j2
        dest: /etc/nginx/sites-available/{{ site_name }}
      tags:
        - nginx

    # Подключить конфигурацию в sites-enabled --> [Перезапустить Nginx]
    - name: Add symlink in nginx sites-enabled
      become: yes
      file:
          src: /etc/nginx/sites-available/{{ site_name }}
          dest: /etc/nginx/sites-enabled/{{ site_name }}
          state: link
      tags:
        - nginx

    # Настраиваем gunicorn --> [Перезапустить gunicorn]
    - name: Write gunicorn service script
      become: yes
      template: 
        src: ./gunicorn.j2
        dest: /etc/systemd/system/gunicorn.{{ site_name }}.service
      tags:
        - gunicorn

    # Устанавливаем пакетный менеджер snap
    - name: Install snap
      become: yes
      apt: name=snapd state=latest
      tags:
        - nginx
        - https
    
    # Устанавливаем snap core 
    - name: Install core
      become: yes
      command: snap install core
      tags:
        - nginx
        - https
    
    # Устанвливаем certbot
    - name: Install certbot
      become: yes
      snap:
        name: certbot
        classic: true
      tags:
        - nginx
        - https

    # Делаем символическую ссылку для certobt
    - name: Create a symbolic link fore certbot
      become: yes
      file:
        src: /snap/bin/certbot
        dest: /usr/bin/certbot
        state: link
      tags:
        - nginx
        - https

    # Добавление ssl сертификата для домена
    - name: Add SSL cert to domain
      become: yes
      command: certbot -n --agree-tos --email {{ mail_for_certbot_ssl }} --domain {{ site_name }} certonly --nginx
      tags:
        - nginx
        - https
    
    # Изменяем файл конфигурации в sites-available для работы с SSL HTTPS
    - name: Add nginx config to sites-available with HTTPS
      become: yes
      template: 
        src: ./nginx-sites-available-https.j2
        dest: /etc/nginx/sites-available/{{ site_name }}
      tags:
        - nginx
        - https
    
    # Перезапускаем службу gunicorn
    - name: Restart gunicorn
      become: yes
      systemd:
        name: gunicorn.{{ site_name }}
        daemon_reload: yes
        enabled: yes
        state: restarted
      tags:
        - gunicorn
        - update_project

    # Перезапускаем службу nginx
    - name: Restart nginx
      become: yes
      service:
        name: nginx
        state: restarted
      tags:
        - nginx
        - update_project